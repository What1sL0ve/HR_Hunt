/* src/app/vacancy/[id]/page.tsx  */
'use client';

import { useState } from 'react';
import { useParams } from 'next/navigation';
import useSWR from 'swr';
import api from '@/lib/axios';
import {
  Container,
  Typography,
  List,
  ListItem,
  ListItemText,
  ListItemSecondaryAction,
  Chip,
  CircularProgress,
  Box,
  Divider,
  Button,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  Autocomplete,
} from '@mui/material';

/* -------------------- —Ç–∏–ø—ã -------------------- */
interface Skill {
  id: number;
  title: string;
  rank?: string | number;
}

interface Candidate {
  id: number;
  full_name: string;
  email: string;
  match_score?: number;
  skills: Skill[];
}

/* -------------------- –∫–æ–º–ø–æ–Ω–µ–Ω—Ç -------------------- */
export default function VacancyResumesPage() {
  const { id } = useParams(); // id –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–∑ URL

  /* --- –∑–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—é–º–µ --- */
  const fetcher = (url: string) => api.get(url).then((r) => r.data);
  const { data, error, isLoading } = useSWR<{ results: Candidate[] }>(
    `/recommendations/resumes/${id}/`,
    fetcher
  );

  /* --- —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∫–Ω–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ --- */
  const [dialogOpen, setDialogOpen] = useState(false);
  const [currentCandidate, setCurrentCandidate] = useState<Candidate | null>(
    null
  );

  const [goodSkills, setGoodSkills] = useState<Skill[]>([]);
  const [avgSkills, setAvgSkills] = useState<Skill[]>([]);
  const [badSkills, setBadSkills] = useState<Skill[]>([]);
  const [universityEmail, setUniversityEmail] = useState('');
  const [comment, setComment] = useState('');

  const equal = (o: Skill, v: Skill) => o.id === v.id;

  /* --- –æ—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥ --- */
  const openFeedback = (cand: Candidate) => {
    setCurrentCandidate(cand);
    setGoodSkills([]);
    setAvgSkills([]);
    setBadSkills([]);
    setUniversityEmail('');
    setComment('');
    setDialogOpen(true);
  };

  /* --- –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å --- */
  const sendFeedback = async () => {
    if (!currentCandidate) return;

    const buildReqs = (arr: Skill[], lvl: 1 | 2 | 3) =>
      arr.map((sk) =>
        api.post('/discipline-feedback/', {
          candidate: currentCandidate.id,
          discipline: sk.title,
          knowledge_level: lvl, // 3 good / 2 avg / 1 bad
          comment,
          university_email: universityEmail,
        })
      );

    try {
      await Promise.all([
        ...buildReqs(goodSkills, 3),
        ...buildReqs(avgSkills, 2),
        ...buildReqs(badSkills, 1),
      ]);
      setDialogOpen(false);
    } catch {
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏');
    }
  };

  /* -------------------- UI -------------------- */

  if (isLoading) {
    return (
      <Box textAlign="center" mt={6}>
        <CircularProgress />
      </Box>
    );
  }

  if (error) {
    return (
      <Box textAlign="center" mt={6}>
        <Typography color="error">
          –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        </Typography>
      </Box>
    );
  }

  return (
    <Container maxWidth="md">
      <Typography variant="h4" gutterBottom>
        –ü–æ–¥—Ö–æ–¥—è—â–∏–µ —Ä–µ–∑—é–º–µ
      </Typography>

      <List>
        {data?.results.map((cand, idx) => (
          <Box key={cand.id}>
            {idx !== 0 && <Divider />}

            <ListItem alignItems="flex-start">
              <ListItemText
                primary={cand.full_name}
                secondary={
                  <>
                    {/* üü¢ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–µ—Å—Ç—å –ø–µ—Ä–≤—ã–º –ø—É–Ω–∫—Ç–æ–º */}
                    <Typography
                      component="span"
                      variant="subtitle2"
                      gutterBottom
                      sx={{ color: 'green' }}
                    >
                      –ü–æ–¥—Ö–æ–¥—è—â–µ—Å—Ç—å:&nbsp;
                      {((cand.match_score ?? 0) * 100).toFixed(0)}%
                    </Typography>

                    <Typography
                      component="span"
                      variant="subtitle2"
                      gutterBottom
                      display="block"
                    >
                      Email: {cand.email}
                    </Typography>

                    <Typography
                      component="span"
                      variant="subtitle2"
                      gutterBottom
                      display="block"
                    >
                      –ù–∞–≤—ã–∫–∏:
                    </Typography>

                    <Box
                      sx={{
                        display: 'flex',
                        flexWrap: 'wrap',
                        gap: 0.5,
                        mb: 1,
                      }}
                    >
                      {cand.skills.map((s) => (
                        <Chip
                          key={s.id}
                          label={`${s.title}${s.rank ? ` (${s.rank})` : ''}`}
                          size="small"
                        />
                      ))}
                    </Box>
                  </>
                }
              />

              <ListItemSecondaryAction>
                <Button variant="outlined" onClick={() => openFeedback(cand)}>
                  –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
                </Button>
              </ListItemSecondaryAction>
            </ListItem>
          </Box>
        ))}
      </List>

      {/* ---------- –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ ---------- */}
      <Dialog
        open={dialogOpen}
        onClose={() => setDialogOpen(false)}
        fullWidth
      >
        <DialogTitle>–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –≤—É–∑—É</DialogTitle>

        <DialogContent>
          <Typography sx={{ mb: 2 }}>
            –ö–∞–Ω–¥–∏–¥–∞—Ç: {currentCandidate?.full_name}
          </Typography>

          {/* —Ö–æ—Ä–æ—à–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã */}
          <Autocomplete
            multiple
            disableCloseOnSelect
            options={currentCandidate?.skills || []}
            getOptionLabel={(o) => o.title}
            isOptionEqualToValue={equal}
            value={goodSkills}
            onChange={(_, v) => setGoodSkills(v)}
            renderTags={(value, getTagProps) =>
              value.map((opt, i) => (
                <Chip
                  label={opt.title}
                  {...getTagProps({ index: i })}
                  key={opt.id}
                />
              ))
            }
            renderInput={(params) => (
              <TextField {...params} label="–ó–Ω–∞–µ—Ç —Ö–æ—Ä–æ—à–æ" margin="normal" />
            )}
          />

          {/* —Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å */}
          <Autocomplete
            multiple
            disableCloseOnSelect
            options={currentCandidate?.skills || []}
            getOptionLabel={(o) => o.title}
            isOptionEqualToValue={equal}
            value={avgSkills}
            onChange={(_, v) => setAvgSkills(v)}
            renderTags={(value, getTagProps) =>
              value.map((opt, i) => (
                <Chip
                  label={opt.title}
                  {...getTagProps({ index: i })}
                  key={opt.id}
                />
              ))
            }
            renderInput={(params) => (
              <TextField {...params} label="–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å" margin="normal" />
            )}
          />

          {/* –Ω—É–∂–Ω–æ –ø–æ–¥—Ç—è–Ω—É—Ç—å */}
          <Autocomplete
            multiple
            disableCloseOnSelect
            options={currentCandidate?.skills || []}
            getOptionLabel={(o) => o.title}
            isOptionEqualToValue={equal}
            value={badSkills}
            onChange={(_, v) => setBadSkills(v)}
            renderTags={(value, getTagProps) =>
              value.map((opt, i) => (
                <Chip
                  label={opt.title}
                  {...getTagProps({ index: i })}
                  key={opt.id}
                />
              ))
            }
            renderInput={(params) => (
              <TextField {...params} label="–ù—É–∂–Ω–æ –ø–æ–¥—Ç—è–Ω—É—Ç—å" margin="normal" />
            )}
          />

          {/* e-mail –í–£–ó–∞ */}
          <TextField
            fullWidth
            type="email"
            margin="normal"
            label="E-mail –í–£–ó–∞"
            value={universityEmail}
            onChange={(e) => setUniversityEmail(e.target.value)}
          />

          {/* –æ–±—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π */}
          <TextField
            fullWidth
            multiline
            rows={3}
            margin="normal"
            label="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
            value={comment}
            onChange={(e) => setComment(e.target.value)}
          />
        </DialogContent>

        <DialogActions>
          <Button onClick={() => setDialogOpen(false)}>–û—Ç–º–µ–Ω–∞</Button>
          <Button variant="contained" onClick={sendFeedback}>
            –û—Ç–ø—Ä–∞–≤–∏—Ç—å
          </Button>
        </DialogActions>
      </Dialog>
    </Container>
  );
}
